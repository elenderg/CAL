To send an buffer to an socket:
  Clear the i/o error.
  Put the buffer's first into an pointer.
  Put the buffer's length into an length.
  Loop.
    If the length is 0, break.
    Call "ws2_32.dll" "send" with the socket and the pointer and the length and 0 returning an number.
    If the number is -1 [socket_error], put "Error sending data." into the i/o error; exit.
    Subtract the number from the length.
    Add the number to the pointer.
  Repeat.
  
  
To send an data string to an winhttp request:
  If the winhttp request is nil, exit.
  Call "winhttp.dll" "WinHttpSendRequest"
  With the winhttp request's request
  And 0 [winhttp_no_additional_headers]
  And 0 
  And the data's first
  And the data's length
  And the data's length
  And 0
  Returning an result number.
  If the result is 0, put "Could not send request." into the i/o error; exit.
  
  
To send an message from an sender to an recipient via an smtp server:
  Send the message to the recipient from the sender via the smtp server.
  
  
To send an message from an sender to an recipient with an subject via an smtp server:
  Send the message to the recipient from the sender with the subject via the smtp server.
  
  
To send an message from an sender to an recipient with an subject:
  Send the message to the recipient from the sender with the subject.
  
  
To send an message from an sender to an recipient:
  Send the message to the recipient from the sender.
  
  
To send an message to an recipient from an sender via an smtp server:
  Put the smtp server into an email's smtp server.
  Put the recipient into the email's recipient.
  Put the sender into the email's sender.
  Put the message into the email's message.
  Send the email.
  
  
To send an message to an recipient from an sender with an subject via an smtp server:
  Put the smtp server into an email's smtp server.
  Put the recipient into the email's recipient.
  Put the sender into the email's sender.
  Put the subject into the email's subject.
  Put the message into the email's message.
  Send the email.
  
  
To send an message to an recipient from an sender with an subject:
  Put the default smtp server into an email's smtp server.
  Put the recipient into the email's recipient.
  Put the sender into the email's sender.
  Put the subject into the email's subject.
  Put the message into the email's message.
  Send the email.
  
  
To send an message to an recipient from an sender:
  Put the default smtp server into an email's smtp server.
  Put the recipient into the email's recipient.
  Put the sender into the email's sender.
  Put the message into the email's message.
  Send the email.
  
  
To send an string to an socket and receive an response string:
  Clear the response string.
  Send the string to the socket.
  If the i/o error is not blank, exit.
  Receive the response string from the socket.
  
  
To send an email:
  Clear the i/o error.
  \ create socket
  Create an socket given the email's smtp server and 25.
  If the i/o error is not blank, exit.
  \ initial receive here for date/time stuff from server
  Receive an response string from the socket.
  If the i/o error is not blank, destroy the socket; exit.
  If the response starts with "5", put the response into the i/o error; trim the i/o error; destroy the socket; exit.
  \ send HELO
  Send "HELO " then the module's name then the crlf string to the socket and receive the response string.
  If the i/o error is not blank, destroy the socket; exit.
  If the response starts with "5", put the response into the i/o error; trim the i/o error; destroy the socket; exit.
  \ send MAIL FROM: <xxx>
  Send "MAIL FROM: <" then the email's sender then ">" then the crlf string to the socket and receive the response string.
  If the i/o error is not blank, destroy the socket; exit.
  If the response starts with "5", put the response into the i/o error; trim the i/o error; destroy the socket; exit.
  \ send RCPT TO: <xxx>
  Send "RCPT TO: <" then the email's recipient then ">" then the crlf string to the socket and receive the response string.
  If the i/o error is not blank, destroy the socket; exit.
  If the response starts with "5", put the response into the i/o error; trim the i/o error; destroy the socket; exit.
  \ send DATA
  Send "DATA" then the crlf string to the socket and receive the response string.
  If the i/o error is not blank, destroy the socket; exit.
  If the response starts with "5", put the response into the i/o error; trim the i/o error; destroy the socket; exit.
  \ send From: xxx crlf To: xxx crlf Subject: xxx crlf Reply-To: xxx crlf message crlf . crlf
  Clear an temp string.
  Append "From: " then the email's sender then the crlf string to the temp string.
  Append "To: " then the email's recipient then the crlf string to the temp string.
  Append "Subject: " then the email's subject then the crlf string into the temp string.
  Append "Reply-To: " then the email's sender then the crlf string into the temp string.
  Append the crlf string to the temp string.
  Append the email's message to the temp string (handling email transparency).
  Append the crlf string then "." then the crlf string to the temp string.
  Send the temp string to the socket and receive the response string.
  If the i/o error is not blank, destroy the socket; exit.
  If the response starts with "5", put the response into the i/o error; trim the i/o error; destroy the socket; exit.
  \ send QUIT
  Send "QUIT" then the crlf string to the socket.
  \ destroy socket
  Destroy the socket.
  
  
