To draw an box (focus style):
  Privatize the box.
  Add the tpp to the box's right-bottom.
  Call "gdi32.dll" "LPtoDP" with the current canvas and the box's whereabouts and 2.
  Convert the white color to an colorref.
  Call "gdi32.dll" "SetBkColor" with the current canvas and the colorref.
  Convert the black color to another colorref.
  Call "gdi32.dll" "SetTextColor" with the current canvas and the other colorref.
  Call "gdi32.dll" "SetMapMode" with the current canvas and 1 [mm_text].
  Call "user32.dll" "DrawFocusRect" with the current canvas and the box's whereabouts.
  Normalize the current canvas.
  
  
To draw an box in an color;
To draw an box with an color:
  Draw the box with the color and the clear color.
  
  
To draw an box with an border color and an fill color (pdf style):
  If the border and the fill are clear, exit.
  Output setcolor given the border and the fill.
  Output the box's left-bottom without advancing.
  Output the box's x-extent without advancing.
  Output the box's y-extent without advancing.
  Output "re".
  Output stroke and fill given the border and the fill.
  
  
To draw an box with an border color and an fill color:
  If the pdf state's page flag is set, draw the box with the border and the fill (pdf style); exit.
  Privatize the box.
  Create the hpen of the current canvas given the border.
  Create the hbrush of the current canvas given the fill.
  If the border is clear, add the tpp to the box's left-top.
  Call "gdi32.dll" "Rectangle" with the current canvas and the box's left and the box's top and the box's right and the box's bottom.
  Destroy the hbrush of the current canvas.
  Destroy the hpen of the current canvas.
  
  
To draw an box:
  Draw the box with the black color and the clear color.
  
  
To draw an circle about some twips wide;
To draw an circle given an width;
To draw an circle some twips in width;
To draw an circle some twips wide:
  Put the twips times the pizza pie divided by 48 into an segment length.
  Add 1 to the segment length.
  Loop.
    Stroke the segment length.
    Turn right 1/48 of the way.
    Add 1 to an count. If the count is 48, break.
  Repeat.
  
  
To draw an circle some twips wide (backwards);
To draw an circle some twips wide (counterclockwise):
  Put the twips times the pizza pie divided by 48 into an segment length.
  Add 1 to the segment length.
  Loop.
    Stroke the segment length.
    Turn left 1/48 of the way.
    Add 1 to an count. If the count is 48, break.
  Repeat.
  
  
To draw an console:
  If the console is nil, exit.
  Save the current canvas.
  Mask only outside the console's box.
  Draw the console's box with the console's border and the console's fill.
  Draw the console's text.
  Restore the current canvas.
  
  
To draw an dot some twips wide on an spot with an color:
  Make the dot the twips wide.
  Center the dot on the spot.
  Draw the dot with the color.
  
  
To draw an dot some twips wide on the current spot with an color:
  Make the dot the twips wide.
  Center the dot on the context's spot.
  Draw the dot with the color.
  
  
To draw an fancy arrow some twips long with an color;
To stroke an fancy arrow some twips long with an color:
  Put the color into the context's color.
  Save the context.
  Stroke the twips.
  Turn around.
  Move the twips divided by 8.
  Save the context.
  Turn left 1/8 of the way.
  Draw an spiral starting with the twips divided by 4.
  Restore the context.
  Turn right 1/8 of the way.
  Draw another spiral backwards starting with the twips divided by 4.
  Restore the context.
  
  
To draw an figure with an color:
  Draw the figure with the color and the clear color.
  
  
To draw an figure with some sides about some twips wide:
  Put 1 and the side count into an fraction.
  Put the twips times the pizza pie divided by the sides into an segment length.
  If the sides are 4, put the twips times 7/8 into the segment length. \ what is this? ***
  Loop.
    Stroke the segment length.
    Turn the fraction.
    Add 1 to an count. if the count is the sides, break.
  Repeat.
  
  
To draw an figure with some sides some twips long using an color;
To draw an figure with some sides and some twips using an color:
  Put the color into the context's color.
  Draw the figure with the sides and the twips.
  
  
To draw an figure with some sides some twips long;
To draw an figure with some sides and some twips:
  Put 1 and the sides into an fraction.
  Loop.
    Stroke the twips.
    Turn the fraction.
    Add 1 to an count. If the count is the sides, break.
  Repeat.
  
  
To draw an gpbitmap at an spot (pdf style):
  If the gpbitmap is nil, exit.
  \ add xobject
  Add an xobject pdf object given "image object".
  Put "I" then the xobject's number into an name.
  \  add to image resources in current page
  Put "/" then the name then " " then the xobject's number then " 0 R" into an string.
  Create an new string thing given the string.
  Append the new string thing to the pdf state's current page's image strings.
  \ finish setting up xobject
  Append the xobject's number then " 0 obj" to the xobject.
  Append "<<" to the xobject.
  Append "/Type /XObject" to the xobject.
  Append "/Subtype /Image" to the xobject.
  Append "/ColorSpace /DeviceRGB" to the xobject.
  Append "/Width " then the gpbitmap's width to the xobject.
  Append "/Height " then the gpbitmap's height to the xobject.
  Append "/BitsPerComponent 8" to the xobject.
  Convert the gpbitmap to an buffer (pdf style).
  Convert the buffer to an nibble string.
  Append "/Filter /ASCIIHexDecode" to the xobject.
  Append "/Length " then the nibble string's length to the xobject.
  Append ">>" to the xobject.
  Append "stream" to the xobject.
  Append the nibble string to the xobject.
  Append "endstream" to the xobject.
  Append "endobj" to the xobject.
  \ draw the image in the current contents
  Put the gpbitmap's width times the tpp into an width.
  Put the gpbitmap's height times the tpp into an height.
  Put the spot's x into an x number.
  Put the pdf state's current height minus the spot's y minus the height into an y number.
  Output "q".
  Output the width then " 0 0 " then the height then " " then the x then " " then the y then " cm".
  Output "/" then the name then " Do".
  Output "Q".
  
  
To draw an half circle about some twips wide;
To draw an half circle given an size:
  Put the size times the pizza pie divided by 48 into an segment length.
  Add 1 to the segment length.
  Loop.
    Stroke the segment length.
    Turn right 1/48 of the way.
    Add 1 to an count.
    If the count is 24, exit.
  Repeat.
  
  
To draw an half circle given an size (backwards);
To draw an half circle given an size (counterclockwise):
  Put the size times the pizza pie divided by 48 into an segment length.
  Add 1 to the segment length.
  Loop.
    Stroke the segment length.
    Turn left 1/48 of the way.
    Add 1 to an count.
    If the count is 24, exit.
  Repeat.
  
  
To draw an hexagon given an side length:
    Stroke the side length.
    Turn right 1/6 of the way.
    Add 1 to an count. If the count is 6, break.
  Repeat.
  
  
To draw an line around some twips long; \ "around" is significant here
  To draw an line about some twips long; \ "about" is significant here
  To stroke an line around some twips long; \ "around" is significant here
  To stroke an line about some twips long: \ "about" is significant here
  Put the twips divided by 2 into some other twips.
  Pick some third twips between the twips minus the other twips and the twips plus the other twips.
  Stroke the line the third twips long.
  
  
To draw an line as high as an box with an color;
To draw an line as tall as an box with an color:
  Put the color into the context's color.
  Stroke the box's height.
  
  
To draw an line as wide as an box with an color:
  Put the color into the context's color.
  Stroke the box's width.
  
  
To draw an line between some twips and some other twips long;
To draw an line between some twips to some other twips long;
To draw an line some twips to some other twips long;
To stroke an line some twips to some other twips long:
  Pick some third twips between the twips and the other twips.
  Stroke the line the third twips long.
  
  
To draw an line some twips long;
To stroke an line some twips long:
  \Wait for the delay. ***
  Put the context's spot into the line's start.
  Put the context's spot into the line's end.
  Get an rise and an run given the context's heading.
  Add the run times the twips divided by 10000 to the line's end's x.
  Add the rise times the twips divided by 10000 to the line's end's y.
  Put the line's end into the context's spot.
  Draw the line with the context's color.
  \If the delay is positive, refresh the screen.
  
  
To draw an line using some twips as the length;
To draw an line using some twips for the length:
  Stroke the twips.
  
  
To draw an line with an color (pdf style):
  If the color is clear, exit.
  Output setcolor given the color and the clear color.
  Output moveto given the line's start.
  Output lineto given the line's end.
  Output stroke and fill given the color and the clear color.
  
  
To draw an line with an color around some twips long; \ "around" is significant here
  To draw an line with an color about some twips long; \ "about" is significant here
  To stroke an line with an color around some twips long; \ "around" is significant here
  To stroke an line with an color about some twips long: \ "about" is significant here
  Put the twips divided by 2 into some other twips.
  Pick some third twips between the twips minus the other twips and the twips plus the other twips.
  Stroke the line with the color the third twips long.
  
  
To draw an line with an color some twips long;
To stroke an line with an color some twips long:
  Put the color into the context's color.
  Put the context's spot into the line's start.
  Stroke the twips.
  Put the context's spot into the line's end.
  
  
To draw an line with an color some twips to some other twips long;
To stroke an line with an color some twips to some other twips long:
  Pick some third twips between the twips and the other twips.
  Stroke the line with the color the third twips long.
  
  
To draw an line with an color:
  If the pdf state's page flag is set, draw the line with the color (pdf style); exit.
  Create the hpen of the current canvas given the color.
  Call "gdi32.dll" "MoveToEx" with the current canvas and the line's start's x and the line's start's y and nil.
  Call "gdi32.dll" "LineTo" with the current canvas and the line's end's x and the line's end's y.
  Convert the color to an colorref.
  Call "gdi32.dll" "SetPixelV" with the current canvas and the line's end's x and the line's end's y and the colorref.
  Destroy the hpen of the current canvas.
  
  
To draw an line:
  Draw the line with the context's color.
  
  
To draw an number in an box with an color:
  Put the number into an string.
  Draw the string in the box with the color and "center".
  
  
To draw an picture (pdf style):
  If the picture is nil, exit.
  Put the picture's box's left minus the picture's uncropped box's left divided by the tpp into an x number.
  Put the picture's box's top minus the picture's uncropped box's top divided by the tpp  into an y number.
  Put the picture's box's width divided by the tpp into an width.
  Put the picture's box's height divided by the tpp into an height.
  Call "gdiplus.dll" "GdipCreateBitmapFromScan0" with the width and the height and 0 and 137224 [pixelformat24bpprgb] and 0 and an gpbitmap's whereabouts.
  Call "gdiplus.dll" "GdipGetImageGraphicsContext" with the gpbitmap and an gpgraphic's whereabouts.
  If the picture's grayscale flag is set, create an gpimageattributes (grayscale).
  Call "gdiplus.dll" "GdipDrawImageRectRectI" with the gpgraphic and the picture's gpbitmap
  And 0 and 0 and the width and the height
  And the x and the y and the width and the height
  And 2 [unitpixel] and the gpimageattributes and nil and 0.
  If the gpimageattributes is not nil, destroy the gpimageattributes.
  Call "gdiplus.dll" "GdipDeleteGraphics" with the gpgraphic.
  Draw the gpbitmap at the picture's box's left-top (pdf style).
  Call "gdiplus.dll" "GdipDisposeImage" with the gpbitmap.
  
  
To draw an picture on an gpgraphic at an x coord and an y coord:
  If the picture is nil, exit.
  If the picture's grayscale flag is set, create an gpimageattributes (grayscale).
  Call "gdiplus.dll" "GdipDrawImageRectRectI" with the gpgraphic and the picture's gpbitmap
  And the x and the y and the picture's uncropped box's width and the picture's uncropped box's height
  And 0 and 0 and the picture's gpbitmap's width and the picture's gpbitmap's height
  And 2 [unitpixel] and the gpimageattributes and nil and 0.
  If the gpimageattributes is not nil, destroy the gpimageattributes.
  
  
To draw an picture:
  If the pdf state's page flag is set, draw the picture (pdf style); exit.
  If the picture is nil, exit.
  Save the current canvas.
  Mask outside the picture's box.
  Call "gdiplus.dll" "GdipCreateFromHDC" with the current canvas and an gpgraphic's whereabouts.
  Call "gdiplus.dll" "GdipSetPageUnit" with the gpgraphic and 2 [pixels].
  Draw the picture on the gpgraphic at the picture's uncropped box's left and the picture's uncropped box's top.
  Call "gdiplus.dll" "GdipDeleteGraphics" with the gpgraphic.
  Restore the current canvas.
  
  
To draw an polygon with an border color and an fill color (pdf style):
  If the polygon is nil, exit.
  If the border and the fill are clear, exit.
  Output setcolor given the border and the fill.
  Get an vertex from the polygon's vertices.
  If the vertex is nil, exit.
  Output moveto given the vertex's spot.
  Loop.
    Get the vertex from the polygon's vertices.
    If the vertex is nil, break.
    Output lineto given the vertex's spot.
  Repeat.
  Output stroke and fill given the border and the fill.
  
  
To draw an polygon with an border color and an fill color:
  If the pdf state's page flag is set, draw the polygon with the border and the fill (pdf style); exit.
  If the polygon is nil, exit.
  Draw the polygon with the fill (fill only).
  Draw the polygon with the border (border only).
  
  
To draw an polygon with an color (border only):
  If the polygon is nil, exit.
  If the color is clear, exit.
  Create the hpen of the current canvas given the color.
  Get an vertex from the polygon's vertices.
  If the vertex is nil, exit.
  Call "gdi32.dll" "MoveToEx" with the current canvas and the vertex's x and the vertex's y and nil.
  Loop.
    Get the vertex from the polygon's vertices.
    If the vertex is nil, break.
    Call "gdi32.dll" "LineTo" with the current canvas and the vertex's x and the vertex's y.
  Repeat.
  Destroy the hpen of the current canvas.
  If the polygon's vertices' first's spot is the polygon's vertices' last's spot, exit.
  Convert the color to an colorref.
  Call "gdi32.dll" "SetPixelV" with the current canvas and the polygon's vertices' last's x and the polygon's vertices' last's y and the colorref.
  
  
To draw an polygon with an color (fill only):
  If the polygon is nil, exit.
  If the color is clear, exit.
  Create the hpen of the current canvas given the clear color.
  Create the hbrush of the current canvas given the color.
  Call "gdi32.dll" "SetPolyFillMode" with the current canvas and 2 [winding].
  Create an vertex array given the polygon's vertices.
  Call "gdi32.dll" "Polygon" with the current canvas and the vertex array's spot pointer and the vertex array's count.
  Destroy the vertex array.
  Destroy the hbrush of the current canvas.
  Destroy the hpen of the current canvas.
  
  
To draw an polygon with an color:
  Draw the polygon with the color and the color.
  
  
To draw an polygon:
  Draw the polygon with the black color and the clear color.
  
  
To draw an quarter circle about some twips wide;
To draw an quarter circle given an size:
  Put the size times the pizza pie divided by 48 into an segment length.
  Add 1 to the segment length.
  Loop.
    Stroke the segment length.
    Turn right 1/48 of the way.
    Add 1 to an count.
    If the count is 12, exit.
  Repeat.
  
  
To draw an quarter circle between some twips and some other twips wide:
  Pick some third twips between the twips and the other twips.
  Draw an quarter circle given the third twips.
  
  
To draw an quarter circle given an size (counterclockwise):
  Put the size times the pizza pie divided by 48 into an segment length.
  Add 1 to the segment length.
  Loop.
    Stroke the segment length.
    Turn left 1/48 of the way.
    Add 1 to an count.
    If the count is 12, exit.
  Repeat.
  
  
To draw an rectangle some twips by some other twips;
To draw an rectangle some twips wide by some other twips high:
  Stroke the other twips.
  Turn right.
  Stroke the twips.
  Turn right.
  Stroke the other twips.
  Turn right.
  Stroke the twips.
  Turn right.
  
  
To draw an roundy box with an border color and an fill color (pdf style):
  If the border and the fill are clear, exit.
  If the roundy box's radius is 0, draw the roundy box as an box with the border and the fill (pdf style); exit.
  Put the roundy box's radius into an radius.
  Put the radius times 2 into an offset.
  Put the roundy box into an box.
  Output setcolor given the border and the fill.
  \ initial moveto
  Output moveto given the box's left and the box's top plus the radius.
  \ left-top
  Put the box's left and the box's top and the box's left plus the offset and the box's top plus the offset into an ellipse.
  Output the arc of the ellipse given "left-top".
  Output lineto given the box's right minus the radius and the box's top.
  \ right-top
  Put the box's right minus the offset and the box's top and the box's right and the box's top plus the offset into the ellipse.
  Output the arc of the ellipse given "right-top".
  Output lineto given the box's right and the box's bottom minus the radius.
  \ right-bottom
  Put the box's right minus the offset and the box's bottom minus the offset and the box's right and the box's bottom into the ellipse.
  Output the arc of the ellipse given "right-bottom".
  Output lineto given the box's left plus the radius and the box's bottom.
  \ left-bottom
  Put the box's left and the box's bottom minus the offset and the box's left plus the offset and the box's bottom into the ellipse.
  Output the arc of the ellipse given "left-bottom".
  \ finish up
  Output "h".
  Output stroke and fill given the border and the fill.
  
  
To draw an roundy box with an border color and an fill color:
  If the pdf state's page flag is set, draw the roundy box with the border and the fill (pdf style); exit.
  Privatize the roundy box.
  Create the hpen of the current canvas given the border.
  Create the hbrush of the current canvas given the fill.
  If the border is clear, add the tpp to the roundy box's left-top.
  Put the roundy box's radius times 2 into an diameter number.
  Call "gdi32.dll" "RoundRect" with the current canvas and the roundy box's left and the roundy box's top and the roundy box's right and the roundy box's bottom
  And the diameter and the diameter.
  Destroy the hbrush of the current canvas.
  Destroy the hpen of the current canvas.
  
  
To draw an roundy box with an color:
  Draw the roundy box with the color and the color.
  
  
To draw an roundy box:
  Draw the roundy box with the black color and the clear color.
  
  
To draw an row of an text (editing):
  If the text is nil, exit.
  If the row is nil, exit.
  Draw the selection box for the row of the text.
  Get an box given the row and the text.
  Draw the row's working string in the box with the text's pen and the text's font and the text's alignment.
  
  
To draw an row of an text:
  If the text is nil, exit.
  If the row is nil, exit.
  Get an box given the row and the text.
  Draw the row's working string in the box with the text's pen and the text's font and the text's alignment.
  
  
To draw an spiral backward given some twips;
To draw an spiral backward starting with some twips;
To draw an spiral given an size (backwards):
  Privatize the size.
  Loop.
    Draw an half circle given the size (backwards).
    Divide the size by 2.
    Add 1 to an count.
    If the count is 5, break.
  Repeat.
  
  
To draw an spiral starting with some twips;
To draw an spiral given an size:
  Privatize the size.
  Loop.
    Draw an half circle given the size.
    Divide the size by 2.
    Add 1 to an count. If the count is 5, break.
  Repeat.
  
  
To draw an spot with an color:
  Convert the color to an colorref.
  Call "gdi32.dll" "SetPixelV" with the current canvas and the spot's x and the spot's y and the colorref.
  
  
To draw an spot:
  Draw the spot with the black color.
  
  
To draw an star given an point count and an size:
  Put 1 and the point count into an fraction.
  Loop.
    Turn right 1/48 of the way.
    Stroke the size.
    Turn around.
    Turn left 1/24 of the way.
    Stroke the size.
    Turn around.
    Turn right 1/48 of the way.
    Turn right the fraction of the way.
    Add 1 to an count. If the count is the point count, break.
  Repeat.
  
  
To draw an string at an spot with an color and an font (pdf style):
  If the string is blank, exit.
  Privatize the spot.  
  Include the font in the current pdf.
  Include the font in the pdf state's current page.
  Find an definition pdf object given the font's name and the pdf state's font index.
  If the definition is nil, exit. \ error
  Create an font info given the font and the string.
  Output the pdf border given the color.
  Output the pdf fill given the color.
  Output "BT".
  Output "/" then the definition's font name then " " then the font's adjusted height then " Tf".
  \  add the font's adjusted height minus the font info's internal leading to the spot's y. \ just plain wrong
  Add the font info's ascent to the spot's y. \ fix for line above
  Output the spot without advancing.
  Output "Td".
  Output "[" without advancing.
  Convert the font info to pdf em units.
  Convert the string and the font info and the definition's font info into an buffer for pdf output.
  Output the buffer without advancing.
  Output "]" without advancing.
  Output " TJ".
  Output "ET".
  Destroy the font info.
  
  
To draw an string at an spot with an color and an font:
  If the pdf state's page flag is set, draw the string at the spot with the color and the font (pdf style); exit.
  Set the colorref of the current canvas given the color.
  Create the hfont of the current canvas given the font.
  Adjust spacing given the string.
  Put the string's first into an substring's first.
  Put the substring's first plus the text cutoff minus 1 into the substring's last.
  Privatize the spot.
  Loop.
    If the substring is blank, break.
    If the substring's last is greater than the string's last, put the string's last into the substring's last.
    Call "gdi32.dll" "TextOutA" with the current canvas and the spot's x and the spot's y and the substring's first and the substring's length.
    Get an width given the substring and the current canvas.
    Add the width to the spot's x.
    Move the substring given the text cutoff.
  Repeat.
  Destroy the hfont of the current canvas.
  
  
To draw an string at an spot with an color:
  Draw the string at the spot with the color and the default font.
  
  
To draw an string at the left of an box with an color and an font:
  Draw the string in the box with the color and the font and "left".
  
  
To draw an string at the left of an box with an color:
  Draw the string at the left of the box with the color and the default font.
  
  
To draw an string at the left of an box with an font:
  Draw the string at the left of the box with the black color and the font.
  
  
To draw an string at the left of an box:
  Draw the string at the left of the box with the black color and the default font.
  
  
To draw an string at the right of an box with an color and an font:
  Draw the string in the box with the color and the font and "right".
  
  
To draw an string at the right of an box with an color:
  Draw the string at the right of the box with the color and the default font.
  
  
To draw an string at the right of an box with an font:
  Draw the string at the right of the box with the black color and the font.
  
  
To draw an string at the right of an box:
  Draw the string at the right of the box with the black color and the default font.
  
  
To draw an string in an box over an number with an color and an font and an alignment:
  Privatize the box.
  If the alignment is "left", add the number to the box's left.
  If the alignment is "right", subtract the number from the box's right.
  Draw the string in the box with the color and the font and the alignment.
  
  
To draw an string in an box with an color and an font and an alignment:
  Get an offset pair given the string and the box and the font and the alignment.
  Draw the string at the box's left-top plus the offset pair with the color and the font.
  
  
To draw an string in an box with an color and an alignment:
  Draw the string in the box with the color and the default font and the alignment.
  
  
To draw an string in an box with an color:
  Draw the string in the box with the color and the default font and "left".
  
  
To draw an string in an box with an font and an alignment:
  Draw the string in the box with the black color and the font and the alignment.
  
  
To draw an string in an box with an alignment:
  Draw the string in the box with the black color and the default font and the alignment.
  
  
To draw an string in an box:
  Draw the string in the box with the black color and the default font and "left".
  
  
To draw an string in the center of an box with an color and an font:
  Draw the string in the box with the color and the font and "center".
  
  
To draw an string in the center of an box with an color:
  Draw the string in the center of the box with the color and the default font.
  
  
To draw an string in the center of an box with an font:
  Draw the string in the center of the box with the black color and the font.
  
  
To draw an string in the center of an box:
  Draw the string in the center of the box with the black color and the default font.
  
  
To draw an terminal:
  If the terminal is nil, exit.
  Save the current canvas.
  Mask only outside the terminal's box.
  Draw and fill the terminal's box with the black color.
  Write the terminal's quoras in the terminal's box.
  Restore the current canvas.
  
  
To draw an text (editing):
  If the text is nil, exit.
  Save the current canvas.
  Mask outside the text's box.
  Draw any visible rows of the text (editing).
  Draw the caret in the text.
  Restore the current canvas.
  
  
To draw an text:
  If the text is nil, exit.
  Save the current canvas.
  Mask outside the text's box.
  Draw any visible rows of the text.
  Restore the current canvas.
  
  
To draw an ellipse on an spot with an color:
  Center the ellipse on the spot.
  Draw the ellipse with the color and the clear color.
  
  
To draw an ellipse with an border color and an fill color (pdf style):
  If the border and the fill are clear, exit.
  Output setcolor given the border and the fill.
  Put the ellipse's left and the ellipse's top into an spot.
  Add the ellipse's y-extent divided by 2 to the spot's y.
  Output moveto given the spot.
  Output the arc of the ellipse given "left-top".
  Output the arc of the ellipse given "right-top".
  Output the arc of the ellipse given "right-bottom".
  Output the arc of the ellipse given "left-bottom".
  Output stroke and fill given the border and the fill.
  
  
To draw an ellipse with an border color and an fill color:
  If the pdf state's page flag is set, draw the ellipse with the border and the fill (pdf style); exit.
  Privatize the ellipse.
  Create the hpen of the current canvas given the border.
  Create the hbrush of the current canvas given the fill.
  If the border is clear, add the tpp to the ellipse's left-top.
  Call "gdi32.dll" "Ellipse" with the current canvas and the ellipse's left and the ellipse's top and the ellipse's right and the ellipse's bottom.
  Destroy the hbrush of the current canvas.
  Destroy the hpen of the current canvas.
  
  
To draw an ellipse with an color:
  Draw the ellipse with the color and the color.
  
  
To draw an ellipse:
  Draw the ellipse with the black color and the clear color.
  
  
To draw and fill an box with an color:
  Draw the box with the color and the color.
  
  
To draw any visible rows of an text (editing):
  If the text is nil, exit.
  Loop.
    Get an row from the text's rows.
    If the row is nil, exit.
    If the row of the text is not visible, repeat.
    Draw the row of the text (editing).
  Repeat.
  
  
To draw any visible rows of an text:
  If the text is nil, exit.
  Loop.
    Get an row from the text's rows.
    If the row is nil, exit.
    If the row of the text is not visible, repeat.
    Draw the row of the text.
  Repeat.
  
  
To draw only within an box;
To draw only inside an box;
To draw only in an box;
To draw only within an box from now on;
To draw only inside an box from now on;
To draw only in an box from now on;
To only draw within an box from now on;
To only draw inside an box from now on;
To only draw in an box from now on;
To only draw within an box;
To only draw inside an box;
To only draw in an box;
To draw within an box only;
To draw inside an box only;
To draw in an box only;
To put masking tape all around an box;
To put masking tape around an box: \ note that this masks the box's border as well
  Privatize the box.
  Indent the box 1 pixel.
  Mask outside the box.
  Put the original box into the context's box. \ *** original box? or indented one?
  
  
To draw the caret in an text:
  If the text is nil, exit.
  Get an box for the caret in the text.
  If the box is not touching the text's box, exit.
  Put the box's left-top and the box's right-bottom into an line.
  Draw the line with the black color.
  
  
To draw the selection box for an row of an text:
  If the text is nil, exit.
  If the row is nil, exit.
  If the row of the text is not selected, exit.
  Get an selection box given the row and the text.
  Draw the selection box with the hilite color and the hilite color.
  
  
