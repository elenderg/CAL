To find an choice given an spot:
  Start with nothing in the choice.
  Loop.
    Get the [first/next] choice from the choices.
    If the choice is missing, exit.
    If the spot is in the choice's box, break.
  Repeat.
  
  
To find an dyad given some dyads and an name:
  Void the dyad.
  Loop.
    Get the dyad from the dyads.
    If the dyad is nil, exit.
    If the dyad's name is the name, exit.
  Repeat.
  
  
To find an pdf object given an kind:
  Void the pdf object.
  Loop.
    Get the pdf object given the pdf state's objects.
    If the pdf object is nil, break.
    If the pdf object's kind is the kind, break.
  Repeat.
  
  
To find an pointer given an string and an index:
  Find an refer given the string and the index.
  If the refer is not nil, put the refer's pointer into the pointer; exit.
  Void the pointer.
  
  
To find an refer given an string and an index:
  \  if the index is nil, exit. \ to make compiler faster
  If the string is blank, void the refer; exit.
  Get an bucket given the string and the index.
  Find the refer given the string and the bucket's refers.
  
  
To find an refer given an string and some refers:
  Void the refer.
  Loop.
    Get the refer from the refers.
    If the refer is nil, exit.
    If the string is the refer's string, exit.
  Repeat.
  
  
To find an sector given an grid and an spot:
  Put the spot's x divided by the grid's x times the grid's x into the sector's x.
  Put the spot's y divided by the grid's y times the grid's y into the sector's y.
  
  
To find an square root of an number: \ rounds down
  Privatize the number.
  De-sign the number.
  If the number is 0, put 0 into the square root; exit.
  If the number is 1, put 1 into the square root; exit.
  Put 1 into an square number.
  Put 3 into an delta number.
  Loop.
    If the square is greater than the number, break.
    Add the delta to the square.
    Add 2 to the delta.
  Repeat.
  Put the delta divided by 2 minus 1 into the square root.
  
  
To find an string given some string things and an string#:
  Clear the string.
  Loop.
    Get an string thing from the string things.
    If the string thing is nil, exit.
    Add 1 to an count.
    If the count is not the string#, repeat.
  Put the string thing's string into the string.
  
  
To find an string thing given an string and some string things:
  Void the string thing.
  Loop.
    Get the string thing given the string things.
    If the string thing is nil, break.
    If the string thing's string is the string, break.
  Repeat.
  
  
To find an substring in an string given another string:
  Slap the substring on the string.
  Loop.
    If the substring is blank, exit.
    If the substring starts with the other string, break.
    Add 1 to the substring's first.
  Repeat.
  Put the substring's first plus the other string's length minus 1 into the substring's last.
  
  
To find an value string given some dyads and an name:
  Find an dyad given the dyads and the name.
  If the dyad is nil, clear the value; exit.
  Put the dyad's value into the value.
  
  
To find an value string given the environment variables and an name:
  Privatize the name.
  Null terminate the name.
  Put 32767 into an length. \ max size for environment variable
  Reassign the value's first given the length.
  Call "kernel32.dll" "GetEnvironmentVariableA" with the name's first and the value's first and the length returning the length.
  Put the value's first plus the length minus 1 into the value's last.
  
  
To find next given an row and an text and an flag:
  Clear the flag.
  If the text is nil, exit.
  If the row is nil, exit.
  Slap an substring on the row's string.
  Put the substring's first plus the find string's length minus 1 into the substring's last.
  If the row's row# is the find anchor's row#, move the substring given the find anchor's column# minus 1.
  Loop.
    If the substring's last is greater than or equal to the row's string's last, exit.
    If the substring is the find string, break.
    Move the substring given 1.
  Repeat.
  Set the flag.
  Put the substring's first minus the row's string's first plus 1 into the text's anchor column#.
  Put the row's row# into the text's anchor row#.
  Put the substring's last minus the row's string's first plus 2 into the text's caret column#.
  Put the row's row# into the text's caret row#.
  
  
To find next given an text and an flag (wrapped text):
  Clear the flag.
  If the text is nil, exit.
  Convert the find anchor to an absolute position called offset given the text.
  Extract an string from the text (no linefeed additions).
  Put the string's first plus the offset minus 1 into an substring's first.
  Put the substring's first plus the find string's length minus 1 into the substring's last.
  Loop.
    If the substring's last is greater than the string's last, exit.
    If the substring is the find string, break.
    Move the substring given 1.
  Repeat.
  Set the flag.
  Put the substring's first minus the string's first plus 1 into an anchor absolute position.
  Put the substring's last minus the string's first plus 2 into an caret absolute position.
  Convert the anchor absolute position to the text's anchor given the text.
  Convert the caret absolute position to the text's caret given the text.
  
  
To find next given an text and an flag:
  If the text's wrap flag is set, find next given the text and the flag (wrapped text); exit.
  Clear the flag.
  If the text is nil, exit.
  If the find string's length is 0, exit.
  Loop.
    Get an row from the text's rows.
    If the row is nil, exit.
    If the row's row# is less than the find anchor's row#, repeat.
    Find next given the row and the text and the flag.
    If the flag is set, exit.
  Repeat.
  
  
To find the next misspelling given an row and an text and an flag:
  Clear the flag.
  If the text is nil, exit.
  If the row is nil, exit.
  Slap an rider on the row's string.
  If the row's row# is the find anchor's row#, add the find anchor's column# minus 1 to the rider's source's first.
  If the rider's source's first is not the row's string's first, skip word characters in the rider's source.
  Loop.
    Move the rider (spell checking rules).
    If the rider's token is blank, exit.
    If the rider's token is not misspelled, repeat.
  Set the flag.
  Put the rider's token's first minus the row's string's first plus 1 into the text's anchor column#.
  Put the row's row# into the text's anchor row#.
  Put the rider's token's last minus the row's string's first plus 2 into the text's caret column#.
  Put the row's row# into the text's caret row#.
  
  
To find the next misspelling in an text given an flag:
  Clear the flag.
  If the text is nil, exit.
  Loop.
    Get an row from the text's rows.
    If the row is nil, exit.
    If the row's row# is less than the find anchor's row#, repeat.
    Find the next misspelling given the row and the text and the flag.
    If the flag is set, exit.
  Repeat.
  
  
