To compile an term given an rider and an name (possessive - field):
  If the compiler's abort flag is set, exit.
  If the term's variable is not nil, put the term's type into an type.
  Find an field term given the term's phrase and the type and the name.
  If the field term is not empty, compile the term given the rider and the field term; exit.
  If the term's variable is nil, abort with "I don't understand the variable '" then the term's phrase then "'." and the rider; exit.
  If the type can be reduced to "pointer", put the type's target type into the type.
  If the type is nil, abort with "There's no '" then the name then "' field in an '" then the term's type's name then "'." and the rider; exit.
  Loop.
    If the compiler's abort flag is set, exit.
    Get an field from the type's fields.
    If the field is nil, abort with "There's no '" then the name then "' field in an '" then the term's type's name then "'." and the rider; exit.
    Find an deep field term given "" and the field's type and the name.
    If the deep field term is empty, repeat.
  Put the field into an first field term's field.
  If the term's type can be reduced to "pointer", set the first field term's dereference flag.
  Compile the term given the rider and the first field term.
  Compile the term given the rider and the deep field term.
  
  